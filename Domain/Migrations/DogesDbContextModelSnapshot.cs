// <auto-generated />
using System;
using Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DogesDbContext))]
    partial class DogesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Contracts.Database.Dog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Breed")
                        .HasColumnType("text")
                        .HasColumnName("breed");

                    b.Property<int>("Enclosure")
                        .HasColumnType("integer")
                        .HasColumnName("enclosure");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("TitlePhoto")
                        .HasColumnType("text")
                        .HasColumnName("title_photo");

                    b.HasKey("Id");

                    b.ToTable("tbl_dogs", "public");
                });

            modelBuilder.Entity("Contracts.Database.Image", b =>
                {
                    b.Property<int>("DogId")
                        .HasColumnType("integer")
                        .HasColumnName("dog_id");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text")
                        .HasColumnName("photo_path");

                    b.HasKey("DogId", "PhotoPath");

                    b.ToTable("tbl_images", "public");
                });

            modelBuilder.Entity("Contracts.Database.Tag", b =>
                {
                    b.Property<int>("DogId")
                        .HasColumnType("integer")
                        .HasColumnName("dog_id");

                    b.Property<string>("TagName")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("DogId", "TagName");

                    b.ToTable("tbl_tags", "public");
                });

            modelBuilder.Entity("Contracts.Database.Image", b =>
                {
                    b.HasOne("Contracts.Database.Dog", "Dog")
                        .WithMany("Photos")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Contracts.Database.Tag", b =>
                {
                    b.HasOne("Contracts.Database.Dog", "Dog")
                        .WithMany("Tags")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Contracts.Database.Dog", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
